--[[
    HttpSpy v1.2.0 - Enhanced Logging
]]

if rconsoleprint then
    rconsoleprint("https://eleutheri.com - #1 Whitelist Service\n\n")
end;

assert(syn or http, "Unsupported exploit (should support syn.request or http.request)");

local options = ({...})[1] or { AutoDecode = true, Highlighting = true, SaveLogs = true, CLICommands = true, ShowResponse = true, BlockedURLs = {}, API = true, LogEnvVars = true };
local version = "v1.2.0";
local logname = string.format("%d-%s-log.txt", game.PlaceId, os.date("%d_%m_%y"));

if options.SaveLogs then
    writefile(logname, string.format("Http Logs from %s\n\n", os.date("%d/%m/%y"))) 
end;

local function printf(...) 
    if options.SaveLogs then
        appendfile(logname, string.format(...));
    end;
    return rconsoleprint(string.format(...));
end;

local function LogEnvironmentVariables()
    if not options.LogEnvVars then return end;
    
    local envVars = {}
    for k, v in pairs(getgenv()) do
        table.insert(envVars, string.format("%s = %s", k, tostring(v)))
    end
    
    printf("\n[ENVIRONMENT VARIABLES]\n%s\n\n", table.concat(envVars, "\n"))
end;

LogEnvironmentVariables();

local function LogFunctionCalls(name, ...)
    printf("\n[FUNCTION CALL] %s(%s)\n\n", name, table.concat({...}, ", "));
end;

local __namecall;
__namecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod();
    LogFunctionCalls(method, ...);
    return __namecall(self, ...);
end));

local __request;
__request = hookfunction((syn or http).request, newcclosure(function(req) 
    if type(req) ~= "table" then return __request(req); end;
    
    LogFunctionCalls("request", req.Url or "Unknown");
    return __request(req);
end));

printf("HttpSpy %s (Enhanced Logging Enabled)\nLogs are saved to: \27[32m%s\27[0m\n\n", version, options.SaveLogs and logname or "(Logging Disabled)");
