--[=[
    Enhanced HttpSpy with Advanced Variable Logging & Reverse Engineering
]=]

if rconsoleprint then
    rconsoleprint("https://eleutheri.com - #1 Whitelist Service\n\n")
end;

assert(syn or http, "Unsupported exploit (should support syn.request or http.request)");

local options = ({...})[1] or { 
    AutoDecode = true, 
    Highlighting = true, 
    SaveLogs = true, 
    CLICommands = true, 
    ShowResponse = true, 
    BlockedURLs = {}, 
    API = true 
};

local version = "v3.0.0";
local logname = string.format("%d-%s-log.txt", game.PlaceId, os.date("%d_%m_%y"));

if options.SaveLogs then
    writefile(logname, string.format("Http Logs from %s\n\n", os.date("%d/%m/%y"))) 
end;

local Serializer = loadstring(game:HttpGet("https://raw.githubusercontent.com/NotDSF/leopard/main/rbx/leopard-syn.lua"))();
local reqfunc = (syn or http).request;
local libtype = syn and "syn" or "http";
local OnRequest = Instance.new("BindableEvent");

local function printf(...) 
    if options.SaveLogs then
        appendfile(logname, string.format(...));
    end;
    return rconsoleprint(string.format(...));
end;

-- Reverse Engineering Utilities
local function ReverseString(str)
    return str:reverse()
end

local function Base64Encode(str)
    return syn.crypt.base64.encode(str)
end

local function Base64Decode(str)
    return syn.crypt.base64.decode(str)
end

local function XOREncrypt(str, key)
    local result = ""
    for i = 1, #str do
        result = result .. string.char(bit32.bxor(string.byte(str, i), key))
    end
    return result
end

local function DeepScan()
    local results = {}
    for _, obj in pairs(getgc(true)) do
        if type(obj) == "table" then
            table.insert(results, obj)
        end
    end
    return results
end

local function FormatTable(tbl, depth)
    depth = depth or 0
    local formatted = "{\n"
    for k, v in pairs(tbl) do
        formatted = formatted .. string.rep(" ", depth * 4) .. "[" .. tostring(k) .. "] = "
        if type(v) == "table" then
            formatted = formatted .. FormatTable(v, depth + 1)
        else
            formatted = formatted .. tostring(v)
        end
        formatted = formatted .. ",\n"
    end
    return formatted .. string.rep(" ", (depth - 1) * 4) .. "}"
end

local function LogEnvironmentVariables()
    local envVars = getfenv()
    local scanResults = DeepScan()
    printf("[Environment Variables]:\n%s\n", FormatTable(envVars))
    printf("[Global Constant Scan]:\n%s\n", FormatTable(scanResults))
end

hookfunction(reqfunc, newcclosure(function(req) 
    if type(req) ~= "table" then return reqfunc(req) end;
    local RequestData = table.clone(req)
    printf("%s.request(%s)\n\n", libtype, Serializer.Serialize(RequestData));
    LogEnvironmentVariables()
    
    -- Attempting to decode and analyze the request
    if options.AutoDecode and RequestData.Body then
        printf("[Reversed String]: %s\n", ReverseString(RequestData.Body))
        printf("[Base64 Decoded]: %s\n", pcall(Base64Decode, RequestData.Body) and Base64Decode(RequestData.Body) or "N/A")
    end
    
    return reqfunc(req);
end));

if request then
    replaceclosure(request, reqfunc);
end;

rconsoleprint(string.format("Enhanced HttpSpy %s (Advanced Logging & Reverse Engineering Enabled)\n", version));
